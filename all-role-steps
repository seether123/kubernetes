apiVersion: v1
kind: ServiceAccount
metadata:
  name: dan
  namespace: pc-analytics

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: dan-role
  namespace: pc-analytics
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - deployments
  - ingresses
  verbs:
  - create
  - delete
  - update
  
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dan-role-binding
  namespace: pc-analytics
subjects:
- kind: ServiceAccount
  name: dan
  namespace: pc-analytics
roleRef:
  kind: Role
  name: dan-role
  apiGroup: rbac.authorization.k8s.io
  
  
kubectl -n pc-analytics describe secret $(kubectl -n pc-analytics get secret | grep dan | awk '{print $1}')
mkdir -p /home/dan/.kube

Create a new file called config in the .kube directory and add the following content:

apiVersion: v1
kind: Config
clusters:
- name: my-cluster
  cluster:
    server: https://my-kubernetes-cluster.com
contexts:
- name: my-context
  context:
    cluster: my-cluster
    user: dan
    namespace: pc-analytics
users:
- name: dan
  user:
    token: <paste the token copied from step 3 here>
    
    
export KUBECONFIG=/home/dan/.kube/config
------------------------------------------------------

kubectl -n pc-analytics get secret $(kubectl -n pc-analytics get sa/dan-sa -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}' | base64 --decode
kubectl config set-credentials dan --token=<token>
kubectl config set-context dan-context --cluster=my-cluster --namespace=pc-analytics --user=dan
kubectl config use-context dan-context

TO get the token fron service account
kubectl get serviceaccounts <service-account-name> -o=jsonpath='{.secrets[*].name}'
kubectl get secret <secret-name> -o=jsonpath='{.data.token}' | base64 --decode

kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[].cluster.certificate-authority-data}'
